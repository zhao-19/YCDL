<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:property-placeholder location="classpath*:db.properties,classpath*:system.properties,classpath*:mongodb.properties"/>
	<context:annotation-config/>

	<context:component-scan base-package="com.winpow.core.util" />
	<!--<context:component-scan base-package="com.winpow.web.action.app.port.aop" />-->
	<context:component-scan base-package="com.winpow.services.app" />
	<context:component-scan base-package="com.winpow.services" />
	<context:component-scan base-package="com.winpow.web.action" />
	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="dataSourceTarget"></constructor-arg>
	</bean>

	<!-- 配置c3p0数据源 -->
	<bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		  destroy-method="close">
		<!--  	<property name="driverClass" value="com.mysql.jdbc.Driver" />-->
		<!--	<property name="jdbcUrl" value="jdbc:mysql://121.42.57.138:3306/wechat?useUnicode=true&amp;characterEncoding=UTF-8" /> -->
		<!-- 	<property name="user" value="root" /> -->
		<!--  	<property name="password" value="1389c21ad3" /> -->

		<property name="driverClass" value="${com.winpow.driver}" />

		<property name="jdbcUrl" value="${com.winpow.dburl}" />
		<property name="user" value="${com.winpow.dbuser}" />
		<property name="password" value="${com.winpow.dbpw}" />


		
		<!--<property name="jdbcUrl" value="jdbc:sqlserver://localhost:1433;DatabaseName=winpow" />-->
		<!--<property name="user" value="sa" />-->
		<!--<property name="password" value="8206320fb" />-->

		<!-- <property name="setAutoCommitOnClose" value="false"/> -->
		
 
 		<!-- <property name="jdbcUrl" value="jdbc:sqlserver://10.0.253.15:1669;DatabaseName=winpow8" />
			<property name="user" value="sa" />
		<property name="password" value="1q2w3e4r@" /> -->


		<!-- <property name="jdbcUrl" value="jdbc:sqlserver://10.0.253.14:1669;DatabaseName=winpow8" />
			<property name="user" value="sa" />
		<property name="password" value="gao@xin_20170405" /> -->
		
		 
		
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>${com.winpow.minPool}</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>${com.winpow.maxPool}</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>${com.winpow.initPool}</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>${com.winpow.maxIdleTime}</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>${com.winpow.acquireIncrement}</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>${com.winpow.maxStatements}</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>${com.winpow.idleConnectionTestPeriod}</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>${com.winpow.acquireRetryAttempts}</value>
		</property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>${com.winpow.breakAfterAcquireFailure}</value>
		</property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>${com.winpow.testConnectionOnCheckout}</value>
		</property>
	</bean>

	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation">
			<value>classpath:mybatis-config.xml</value>
		</property>
		<property name="mapperLocations" value="classpath*:/config/**/*.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sessionFactory" />
	</bean>

	<!--可以使用AutoWired自动注入-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.winpow.services.**.mapper" />
	</bean>

	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource" /> 
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<!-- <aop:pointcut id="interceptorPointCuts" expression="execution(public * com.winpow.services.*.impl.*.*(..))" /> -->
		<aop:pointcut id="interceptorPointCuts" expression="execution(public * com.winpow.web.action.*.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
		<aop:aspect ref="logAop">
			<aop:pointcut id="log" expression="(execution(public * com.winpow.web.action..*.*(..)) or execution(public * com.winpow.core.BaseAction.*(..)))"/>
			<aop:before method="logBefore" pointcut-ref="log" />
			<aop:after method="logAfter" pointcut-ref="log"  />
			<aop:after-throwing method="logAfterThrow" pointcut-ref="log"  throwing="e" />

		</aop:aspect>
	</aop:config>


	<!-- mongo -->
	<import resource="applicationContext-mongodb.xml"/>
	<!-- base -->
	<import resource="strutsSpring/spring-base.xml"/>
	
	<!-- spring-services -->
	<import resource="strutsSpring/manage/spring-services.xml"/>
	<import resource="strutsSpring/front/spring-services.xml"/>
	<import resource="strutsSpring/manage/spring-services-task.xml"/>
	<import resource="strutsSpring/app/spring-services.xml"/>

	<!-- spring-struts -->
	<import resource="strutsSpring/manage/spring-struts.xml"/>
	<import resource="strutsSpring/front/spring_struts.xml"/>
	<import resource="strutsSpring/app/spring_struts.xml"/>
</beans>